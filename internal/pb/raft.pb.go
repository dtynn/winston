// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DataNode struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *DataNode) Reset()                    { *m = DataNode{} }
func (m *DataNode) String() string            { return proto.CompactTextString(m) }
func (*DataNode) ProtoMessage()               {}
func (*DataNode) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DataNode) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DataNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RaftGroup struct {
	Id   uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Node []*DataNode `protobuf:"bytes,2,rep,name=node" json:"node,omitempty"`
}

func (m *RaftGroup) Reset()                    { *m = RaftGroup{} }
func (m *RaftGroup) String() string            { return proto.CompactTextString(m) }
func (*RaftGroup) ProtoMessage()               {}
func (*RaftGroup) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *RaftGroup) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RaftGroup) GetNode() []*DataNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type RaftAddGroup struct {
	Group *RaftGroup `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *RaftAddGroup) Reset()                    { *m = RaftAddGroup{} }
func (m *RaftAddGroup) String() string            { return proto.CompactTextString(m) }
func (*RaftAddGroup) ProtoMessage()               {}
func (*RaftAddGroup) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *RaftAddGroup) GetGroup() *RaftGroup {
	if m != nil {
		return m.Group
	}
	return nil
}

type RaftAddGroupResp struct {
	Result *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *RaftAddGroupResp) Reset()                    { *m = RaftAddGroupResp{} }
func (m *RaftAddGroupResp) String() string            { return proto.CompactTextString(m) }
func (*RaftAddGroupResp) ProtoMessage()               {}
func (*RaftAddGroupResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *RaftAddGroupResp) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type RaftMessage struct {
	Message []*RaftGroupMessage `protobuf:"bytes,1,rep,name=message" json:"message,omitempty"`
}

func (m *RaftMessage) Reset()                    { *m = RaftMessage{} }
func (m *RaftMessage) String() string            { return proto.CompactTextString(m) }
func (*RaftMessage) ProtoMessage()               {}
func (*RaftMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *RaftMessage) GetMessage() []*RaftGroupMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type RaftGroupMessage struct {
	Id  uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Raw [][]byte `protobuf:"bytes,2,rep,name=raw,proto3" json:"raw,omitempty"`
}

func (m *RaftGroupMessage) Reset()                    { *m = RaftGroupMessage{} }
func (m *RaftGroupMessage) String() string            { return proto.CompactTextString(m) }
func (*RaftGroupMessage) ProtoMessage()               {}
func (*RaftGroupMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *RaftGroupMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RaftGroupMessage) GetRaw() [][]byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

type RaftMessageResponse struct {
	Response []*RaftGroupMessageResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RaftMessageResponse) Reset()                    { *m = RaftMessageResponse{} }
func (m *RaftMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*RaftMessageResponse) ProtoMessage()               {}
func (*RaftMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *RaftMessageResponse) GetResponse() []*RaftGroupMessageResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type RaftGroupMessageResponse struct {
	Result *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *RaftGroupMessageResponse) Reset()                    { *m = RaftGroupMessageResponse{} }
func (m *RaftGroupMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*RaftGroupMessageResponse) ProtoMessage()               {}
func (*RaftGroupMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *RaftGroupMessageResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*DataNode)(nil), "pb.DataNode")
	proto.RegisterType((*RaftGroup)(nil), "pb.RaftGroup")
	proto.RegisterType((*RaftAddGroup)(nil), "pb.RaftAddGroup")
	proto.RegisterType((*RaftAddGroupResp)(nil), "pb.RaftAddGroupResp")
	proto.RegisterType((*RaftMessage)(nil), "pb.RaftMessage")
	proto.RegisterType((*RaftGroupMessage)(nil), "pb.RaftGroupMessage")
	proto.RegisterType((*RaftMessageResponse)(nil), "pb.RaftMessageResponse")
	proto.RegisterType((*RaftGroupMessageResponse)(nil), "pb.RaftGroupMessageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	// add raft group
	AddGroup(ctx context.Context, in *RaftAddGroup, opts ...grpc.CallOption) (*RaftAddGroupResp, error)
	// process raft messages
	Message(ctx context.Context, in *RaftMessage, opts ...grpc.CallOption) (*RaftMessageResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) AddGroup(ctx context.Context, in *RaftAddGroup, opts ...grpc.CallOption) (*RaftAddGroupResp, error) {
	out := new(RaftAddGroupResp)
	err := grpc.Invoke(ctx, "/pb.Raft/AddGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) Message(ctx context.Context, in *RaftMessage, opts ...grpc.CallOption) (*RaftMessageResponse, error) {
	out := new(RaftMessageResponse)
	err := grpc.Invoke(ctx, "/pb.Raft/Message", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	// add raft group
	AddGroup(context.Context, *RaftAddGroup) (*RaftAddGroupResp, error)
	// process raft messages
	Message(context.Context, *RaftMessage) (*RaftMessageResponse, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftAddGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AddGroup(ctx, req.(*RaftAddGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Message(ctx, req.(*RaftMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGroup",
			Handler:    _Raft_AddGroup_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _Raft_Message_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x5d, 0x4b, 0xf3, 0x30,
	0x14, 0xa6, 0xdd, 0xde, 0x7d, 0x9c, 0xf5, 0xd5, 0x12, 0x07, 0x86, 0xe2, 0x45, 0x89, 0x37, 0xbd,
	0xea, 0x45, 0x3b, 0xc4, 0x9b, 0x09, 0x82, 0xe0, 0x95, 0x0a, 0xf9, 0x07, 0xa9, 0xc9, 0xc6, 0xc0,
	0x36, 0x25, 0xe9, 0xf0, 0xef, 0x4b, 0xd2, 0xa4, 0xd4, 0x4d, 0xc1, 0xbb, 0x93, 0xe7, 0xe3, 0x3c,
	0xe7, 0x1c, 0x02, 0xa0, 0xd8, 0xae, 0xcb, 0x5b, 0x25, 0x3b, 0x89, 0xc2, 0xb6, 0x4a, 0xa2, 0x77,
	0x59, 0xd7, 0xb2, 0xe9, 0x11, 0xb2, 0x81, 0xc5, 0x13, 0xeb, 0xd8, 0xab, 0xe4, 0x02, 0x5d, 0x40,
	0x78, 0xe0, 0x38, 0x48, 0x83, 0x6c, 0x4a, 0xc3, 0x03, 0x47, 0x18, 0xe6, 0x8c, 0x73, 0x25, 0xb4,
	0xc6, 0x61, 0x1a, 0x64, 0x4b, 0xea, 0x9f, 0x64, 0x0b, 0x4b, 0xca, 0x76, 0xdd, 0xb3, 0x92, 0xc7,
	0xf6, 0xcc, 0x96, 0xc2, 0xb4, 0x91, 0x5c, 0xe0, 0x30, 0x9d, 0x64, 0xab, 0x22, 0xca, 0xdb, 0x2a,
	0xf7, 0x11, 0xd4, 0x32, 0xa4, 0x84, 0xc8, 0xd8, 0x1f, 0x39, 0xef, 0x3b, 0xdc, 0xc2, 0xbf, 0xbd,
	0x29, 0x6c, 0x93, 0x55, 0xf1, 0xdf, 0x58, 0x86, 0xfe, 0xb4, 0xe7, 0xc8, 0x1d, 0xc4, 0x63, 0x13,
	0x15, 0xba, 0x45, 0x04, 0x66, 0x4a, 0xe8, 0xe3, 0x47, 0xe7, 0x9c, 0x60, 0x9d, 0x16, 0xa1, 0x8e,
	0x21, 0x5b, 0x58, 0x19, 0xdf, 0x8b, 0xd0, 0x9a, 0xed, 0x05, 0xca, 0x61, 0x5e, 0xf7, 0x25, 0x0e,
	0xec, 0x80, 0xeb, 0x6f, 0x69, 0x4e, 0x46, 0xbd, 0x88, 0x6c, 0xfa, 0xd8, 0x31, 0x79, 0xb6, 0x71,
	0x0c, 0x13, 0xc5, 0x3e, 0xed, 0xc2, 0x11, 0x35, 0x25, 0x79, 0x83, 0xab, 0x51, 0xa8, 0x99, 0x55,
	0x36, 0x5a, 0xa0, 0x7b, 0x58, 0x28, 0x57, 0xbb, 0xf4, 0x9b, 0x1f, 0xd3, 0x9d, 0x86, 0x0e, 0x6a,
	0xf2, 0x00, 0xf8, 0x37, 0xd5, 0x5f, 0xae, 0x50, 0x48, 0x98, 0x1a, 0x3f, 0x2a, 0x60, 0x31, 0x9c,
	0x3d, 0xf6, 0xd9, 0x1e, 0x49, 0xd6, 0xa7, 0x88, 0xbd, 0x72, 0x09, 0x73, 0xbf, 0xf9, 0xa5, 0x17,
	0x38, 0x20, 0xb9, 0x3e, 0x01, 0xfc, 0x50, 0xd5, 0xcc, 0xfe, 0xaf, 0xf2, 0x2b, 0x00, 0x00, 0xff,
	0xff, 0x1d, 0xa6, 0x46, 0xfb, 0x7f, 0x02, 0x00, 0x00,
}
